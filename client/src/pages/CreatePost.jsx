import { useState } from "react";
import { useNavigate } from "react-router-dom";

import { preview } from "../assets";
import { getRandomPrompt } from "../utils";
import { FormField, Loader } from "../components";

// Create Post function
const CreatePost = () => {
  const navigate = useNavigate(); // we declare navigate with the value of function useNavigate

  //setting useState with default object with values
  const [form, setForm] = useState({
    name: "",
    prompt: "",
    photo: "",
  });

  const [generatingImg, setGeneratingImg] = useState(false);
  const [loading, setLoading] = useState(false);

  // this function handles submit events
  const handleSubmit = async (e) => {
    // this prevents from clearing the form when submmitted
    e.preventDefault();

    // Check if both form.prompt and form.photo are truthy (i.e., not null or undefined)
    if (form.prompt && form.photo) {
      // If conditions are met, set loading state to true
      setLoading(true);

      // Use try-catch block to handle potential errors during the asynchronous operation
      try {
        // Send a POST request to "http://localhost:8080/api/v1/post"
        const response = await fetch("http://localhost:8080/api/v1/post", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          // Convert form data to JSON and include it in the request body
          body: JSON.stringify({ ...form }),
        });

        // Check if the response status is OK (status code 200-299)
        if (response.ok) {
          // If OK, parse the response as JSON (assuming it returns JSON)
          await response.json();
          // Navigate to the "/" route (assuming there's a navigate function available)
          navigate("/");
        }
      } catch (error) {
        // If an error occurs during the try block, display an alert with the error message
        alert(error);
      } finally {
        // Regardless of success or failure, set loading state back to false
        setLoading(false);
      }
    }
  };

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };
  const handleSupriseMe = () => {
    const randomPropmt = getRandomPrompt(form.prompt);
    setForm({ ...form, prompt: randomPropmt });
  };

  /*
  this function works: 
  
  so the response is awaiting for the fetch request to complete, 

  the fetch request has 2 parameters which are the endpoint and the response from the backend
  if the response is okay, it will be returned from the end point and will pass to the  
  body. 

  if the 
  */
  const generateImage = async () => {
    if (form.prompt) {
      try {
        setGeneratingImg(true);
        const response = await fetch(
          "https://imagegen-ib97.onrender.com/api/v1/dalle",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              prompt: form.prompt,
            }),
          }
        );
        const data = await response.json();
        setForm({ ...form, photo: `data:image/jpeg;base64, ${data.photo}` });
      } catch (error) {
        alert(error);
      } finally {
        setGeneratingImg(false);
      }
    } else {
      alert("please enter a prompt");
    }
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px] ">Create</h1>

        <p className="mt-2 text-[#666e75] text-[16px] ">
          Create Imaginative and Visually stunning images generated by DALL-E AI
          and share them with the community
        </p>
      </div>

      <form className="mt-16 max-w-3xl" onSubmit={handleSubmit}>
        <div className="flex flex-col gap-5">
          <FormField
            LabelName="Your name"
            type="text"
            name="name"
            placeholder="John Doe"
            value={form.name}
            handleChange={handleChange}
          />

          <FormField
            LabelName="Prompt"
            type="text"
            name="prompt"
            placeholder="a fortune-telling shiba inu reading your fate in a giant hamburger, digital art"
            value={form.prompt}
            handleChange={handleChange}
            isSurpriseMe
            handleSurpriseMe={handleSupriseMe}
          />

          <div className="relative bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 w-64 h-64 p-3 flex justify-center items-center">
            {form.photo ? (
              <img
                src={form.photo}
                alt={form.prompt}
                className="w-64 h-64 object-contain"
              />
            ) : (
              <img
                src={preview}
                alt="preview"
                className="w-9/12 h-9/12 object-contain opacity-40"
              />
            )}

            {generatingImg && (
              <div className="absolute inset-0 z-0 flex justify-center items-center bg-[rgba(0,0,0,0.5)] rounded-lg">
                <Loader />
              </div>
            )}
          </div>
        </div>

        <div className="mt-5 flex gap-5">
          <button
            type="button"
            onClick={generateImage}
            className="text-white bg-green-700 font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center"
          >
            {generatingImg ? "Generating...." : "Generate"}
          </button>
        </div>

        <div className="mt-10">
          <p className="mt-2 text-[#666e75] text-[14px]">
            Once you have created the image that you want, you can share it with
            others in the community
          </p>

          <button
            type="submit"
            className="mt-3 text-white bg-[#6469ff] font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center"
          >
            {loading ? "Sharing..." : "Share with the community"}
          </button>
        </div>
      </form>
    </section>
  );
};

export default CreatePost;
